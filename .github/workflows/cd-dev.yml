name: CD - Dev

on:
  workflow_dispatch:
  push:
    branches:
      - dev

jobs:
  build:
    name: build
    runs-on: ubuntu-latest
    outputs:
      docker_image_tag: ${{ steps.export_tag.outputs.docker_image_tag }}
    steps:
      # 코드 체크아웃
      - name: Checkout repository
        uses: actions/checkout@v2
        with:
          fetch-depth: 0
      # JDK 설치
      - name: Set up JDK 17
        uses: actions/setup-java@v1
        with:
          java-version: 17

      # secret 파일 불러오기
      - name: make secret files
        run: |
          mkdir -p ./src/main/resources
          echo "${{ secrets.APPLICATION_YML }}" > ./src/main/resources/application.yml
          echo "${{ secrets.FIREBASE_JSON }}" > ./src/main/resources/weathertago-firebase-adminsdk-fbsvc-4885ca4b1e.json

      # Gradle Build
      - name: Build with Gradle
        run: |
          sudo chmod +x ./gradlew
          sudo ./gradlew clean build

      - name: Docker meta
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ secrets.DOCKER_HUB_USERNAME }}/weathertago
          tags: |
            type=raw,value={{date 'YYYYMMDD-HHmm'}} 

      - name: Export Docker tag
        id: export_tag
        run: echo "docker_image_tag=$(echo '${{ steps.meta.outputs.tags }}' | cut -d ':' -f2)" >> $GITHUB_OUTPUT

      # DockerHub 로그인
      - name: Login to DockerHub
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.DOCKER_HUB_USERNAME }}
          password: ${{ secrets.DOCKER_HUB_ACCESS_TOKEN }}

      # DockerHub Push
      - name: Build and Push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          tags: ${{ steps.meta.outputs.tags }}


  deploy:
    name: Deploy
    runs-on: ubuntu-latest
    needs: build

    steps:
      # AWS 배포
      - name: SSH to EC2 and deploy
        uses: appleboy/ssh-action@v1.2.0
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USER }}
          key: ${{ secrets.EC2_SSH_KEY }}
          script: |
            cd backend
            git pull
            export TAG=${{ needs.build.outputs.docker_image_tag }}
            sudo docker-compose stop
            sudo docker-compose rm -f     
            sudo docker rmi ${{ secrets.DOCKER_HUB_USERNAME }}/weathertago:$TAG || true         
            sudo docker-compose pull
            sudo docker-compose up -d
        env:
          ACTIONS_RUNNER_DEBUG: true


